
====================================================
Protocole de communication pour le projet Spider V1
====================================================

Toutes les chaines de caracteres seront encod�es en ASCII, sauf si je note autre chose.
Puisqu'on envoit la taille de la chaine de caracteres a chaque fois, il ne FAUT PAS envoy� le '\0' qui termine la chaine.
Le communication est bas� sur un protocle TCP chiffr� par l'algorithme SSL (2.0), et le transferts de bits est en little endian.

1 - 1ere connection


Lorsqu'un client se connecte au serveur, il (le client) lui envoi quelques infos.
Ensuite le serveur lui reponds pour determiner si on peut commencer l'envoi des
donn�es.

		 ---------------------------------------------
Client:		| Version  | Size name |   Name    | Date     |
		 ---------------------------------------------
		| uint16_t |  uint16_t |  char *   | uint32_t |
		 ---------------------------------------------

	Version: unsigned short ( 16 bits )

		 Le client envoi sa version du protocole.

	Size name: unsigned short ( 16 bits )

	     	 Taille de la chaine de caracteres qui suit

	Name: char *

	    	 Chaine de caracteres corresponds au nom du client
		 ( Ouais il a un nom )
		 
	Date :	uint32_t
		Timestamp de la Date

----------------------------------------------------

Les prochains paquets commenceront par un octet qui permet d'identifier
le type de requete/reponse.
Ce seront des multiples de 2 pour pouvoir comparer l'ID
avec un & binaire.

----------------------------------------------------


2 - Touches de la souris

         ---------------------------------------------------------------------------------------
Client: |   ID    |   Date   | PID      | Size Active | Active |     X     |    Y     | Button  |
         ---------------------------------------------------------------------------------------
	| uint8_t | uint32_t | uint16_t |  uint16_t   | char * |  uint16_t | uint16_t | uint8_t |
         ---------------------------------------------------------------------------------------


	 ID: unsigned char ( 8 bits )

	     	  Valeur: 8

	 Date: unsigned int ( 32 bits )

	       	  Octet qui correspond a la date des entr�s

	 Size Active: unsigned short ( 16 bits )

	      	  Taille de la chaine de caracteres qui suit

	 Active: char *

	 	  Chaine de caracteres qui correspond a la fenetre active

         X: unsigned short ( 16 bits )

	      	  Position X de la souris

         Y: unsigned short ( 16 bits )

	      	  Position Y de la souris

         Button: unsigned char ( 8 bits )

	 	  Valeurs:
			1  -> Clique gauche
			2  -> Clique milieu
			4  -> Clique droit
			8  -> x1Button
			16 -> x2Button


-----------------------------------------------------


3 - Touches du clavier


         ---------------------------------------------------------------------------
Client: |   ID    |   Date   | PID      | Size Active | Active | Size text |  Text  |
         ---------------------------------------------------------------------------
	| uint8_t | uint32_t | uint16_t | uint16_t    | char * |  uint16_t | char * |
         ---------------------------------------------------------------------------


	 ID: unsigned char ( 8 bits )

	     	  Valeur: 1

	 Date: unsigned int ( 32 bits )

	       	  Octet qui correspond a la date des entr�es clavier

	 Size Active: unsigned short ( 16 bits )

	      	  Taille de la chaine de caracteres qui suit

	 Active: char *

	 	  Chaine de caracteres qui correspond a la fenetre active

	 Size text: unsigned short ( 16 bits )

	      	  Taille de la chaine de caracteres qui suit

	 Text: char *

	       	  Chaine de caracteres correspondant au texte tap� au clavier
		  encod� en UTF-8 ( comme ca y'a les CTRL, DEL, MAJ etc ).
		  Il est possible d'envoy� plusieurs touches en meme temps,
		  c'est au client de voir.


----------------------------------------------------

4 - Retour du serveur


Le serveur envoi sa commande puis le client lui r�ponds

          --------------------
Serveur: |    ID   | Retour   |
	  --------------------
	 | uint8_t | uint8_t |
          --------------------

	  ID: unsigned char ( 8 bits )

	     	  Valeur: 2


	  Retour: unsigned char

	     Retour : normaux:
	
		0	Erreur	La version du protocole n'est pas bonne. Le client se deconnecte. Valeur commande est ignor�e
		1	Erreur	Donn�es envoy�es au serveur invalides.
		2	Succ�s	Le num�ro du protocole est connu du serveur.
		3	Succ�s	Confirmation de la r�ception des donn�es.

	     Retour : commande:
	
		4	Yes/No	Activer le d�marrage automatique � la session de l'utilisateur
		5	Yes/No	Activer le d�marrage automatique � la machine l'utilisateur
		6	Yes/No	Arr�ter le programme
		7	Yes/No	Met en pause ou r�active le programme
		8	Yes/No	D�truit toute trace du programme


------------------------------------------------------


5 - Retour du client


          -----------------------------------------
Client:  |    ID   |   OK ?  |  Size data | Data   |
          -----------------------------------------
         | uint8_t | uint8_t |  uint16_t  | char * |
          -----------------------------------------

	  ID: unsigned char ( 8 bits )

	     	  Valeur: 4

	  OK ?: unsigned char

	     	  1 -> OK. Commande comprise et execut�e
		  0 -> KO. Commande invalide

	  Size data: unsigned short ( 16 bits )

	      	  Taille de la donn�e qui suit

	  Data: char *

	       	  Donn�e correspond a la reponse de la commande


Note: Si le "OK ?" est a 0 et qu'on envoi pas de donn�e, le paquet sera former comme
ca:

   --------------------------------
  |    ID   |   OK ?  |  Size data |
   --------------------------------
  | uint8_t | uint8_t |  uint16_t  |
   --------------------------------
(avec Size data = 0 )


====================================================


Note: Si "Active" n'est pas gerer par le client, on met "Size Active" a 0
et on zape "Active". Exemple avec les touches de clavier:


Paquet "de base" pour les touches clavier:


         ----------------------------------------------------------------
        |   ID    |   Date   | Size Active | Active | Size text |  Text  |
         ----------------------------------------------------------------
	| uint8_t | uint32_t |  uint16_t   | char * |  uint16_t | char * |
         ----------------------------------------------------------------


Paquet avec l'Active pas ger�:

		  -------------------------------------------------------
		 |    ID   |   Date   | Size Active | Size text |  Text  |
		  --------------------------------------------------------
Valeurs: 	 |    1    | 34798324 |      0      |     2     |  "ab"  |
		  --------------------------------------------------------
		 | uint8_t | uint32_t |  uint16_t   | uint16_t  | char * |
		  -------------------------------------------------------
