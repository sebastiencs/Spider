
====================================================
Protocole de communication pour le projet Spider V1
====================================================

Toutes les chaines de caracteres seront encodées en ASCII, sauf si je note
autre chose.
Puisqu'on envoit la taille de la chaine de caracteres a chaque fois, il ne FAUT PAS
envoyé le '\0' qui termine la chaine.

----------------------------------------------------

1 - 1ere connection


Lorsqu'un client se connecte au serveur, il (le client) lui envoi quelques infos.
Ensuite le serveur lui reponds pour determiner si on peut commencer l'envoi des
données.

	 ----------------------------------
Client:	| Version  | Size name |   Name    |
	 ----------------------------------
 	| uint16_t |  uint16_t |  char *   |
	 ----------------------------------

	Version: unsigned short ( 16 bits )

		 Le client envoi sa version du protocole.

	Size name: unsigned short ( 16 bits )

	     	 Taille de la chaine de caracteres qui suit

	Name: char *

	    	 Chaine de caracteres corresponds au nom du client
		 ( Ouais il a un nom )


          ----------
Serveur: |  Reponse |
          -----------
	 |  uint8_t |
          ----------

	Reponse: unsigned char ( 8 bits )

		 0 -> KO. La version du protocole n'est pas bonne.
		      Le client se deconnecte.

		 1 -> OK. Le protocole correspond, le jeu commence.


----------------------------------------------------

Les prochains paquets commenceront par un octet qui permet d'identifier
le type de requete/reponse.
Ce seront des multiples de 2 pour pouvoir comparer l'ID
avec un & binaire.

----------------------------------------------------


2 - Touches du clavier


         ----------------------------------------------------------------
Client: |   ID    |   Date   | Size Active | Active | Size text |  Text  |
         ----------------------------------------------------------------
	| uint8_t | uint32_t |  uint16_t   | char * |  uint16_t | char * |
         ----------------------------------------------------------------


	 ID: unsigned char ( 8 bits )

	     	  Valeur: 1

	 Date: unsigned int ( 32 bits )

	       	  Octet qui correspond a la date des entrées clavier

	 Size Active: unsigned short ( 16 bits )

	      	  Taille de la chaine de caracteres qui suit

	 Active: char *

	 	  Chaine de caracteres qui correspond a la fenetre active

	 Size text: unsigned short ( 16 bits )

	      	  Taille de la chaine de caracteres qui suit

	 Text: char *

	       	  Chaine de caracteres correspondant au texte tapé au clavier
		  encodé en UTF-8 ( comme ca y'a les CTRL, DEL, MAJ etc ).
		  Il est possible d'envoyé plusieurs touches en meme temps,
		  c'est au client de voir.


----------------------------------------------------

3 - Commandes


Le serveur envoi sa commande puis le client lui réponds

          ----------------------------------
Serveur: |    ID   | Size command | Command |
	 | uint8_t |    uint16_t  | char *  |
          ----------------------------------

	  ID: unsigned char ( 8 bits )

	     	  Valeur: 2

	  Size command: unsigned short ( 16 bits )

	      	  Taille de la chaine de caracteres qui suit

	  Command: char *

	       	  Chaine de caractere qui correspond a une commande


          -----------------------------------------
Client:  |    ID   |   OK ?  |  Size data | Data   |
          -----------------------------------------
         | uint8_t | uint8_t |  uint16_t  | char * |
          -----------------------------------------

	  ID: unsigned char ( 8 bits )

	     	  Valeur: 4

	  OK ?: unsigned char

	     	  1 -> OK. Commande comprise et executée
		  0 -> KO. Commande de merde

	  Size data: unsigned short ( 16 bits )

	      	  Taille de la donnée qui suit

	  Data: char *

	       	  Donnée correspond a la reponse de la commande


Note: Si le "OK ?" est a 0 et qu'on envoi pas de donnée, le paquet sera former comme
ca:

   --------------------------------
  |    ID   |   OK ?  |  Size data |
   --------------------------------
  | uint8_t | uint8_t |  uint16_t  |
   --------------------------------
(avec Size data = 0 )


----------------------------------------------------


4 - Touches de la souris

         ----------------------------------------------------------------------------
Client: |   ID    |   Date   | Size Active | Active |     X     |    Y     | Button  |
         ----------------------------------------------------------------------------
	| uint8_t | uint32_t |  uint16_t   | char * |  uint16_t | uint16_t | uint8_t |
         ----------------------------------------------------------------------------


	 ID: unsigned char ( 8 bits )

	     	  Valeur: 8

	 Date: unsigned int ( 32 bits )

	       	  Octet qui correspond a la date des entrés

	 Size Active: unsigned short ( 16 bits )

	      	  Taille de la chaine de caracteres qui suit

	 Active: char *

	 	  Chaine de caracteres qui correspond a la fenetre active

         X: unsigned short ( 16 bits )

	      	  Position X de la souris

         Y: unsigned short ( 16 bits )

	      	  Position Y de la souris

         Button: unsigned char ( 8 bits )

	 	  Valeurs:
		       	  1 -> Clique gauche
		  	  2 -> Clique milieu
			  4 -> Clique droit




====================================================


Note: Si "Active" n'est pas gerer par le client, on met "Size Active" a 0
et on zape "Active". Exemple avec les touches de clavier:


Paquet "de base" pour les touches clavier:


         ----------------------------------------------------------------
        |   ID    |   Date   | Size Active | Active | Size text |  Text  |
         ----------------------------------------------------------------
	| uint8_t | uint32_t |  uint16_t   | char * |  uint16_t | char * |
         ----------------------------------------------------------------


Paquet avec l'Active pas geré:

	  -------------------------------------------------------
	 |    ID   |   Date   | Size Active | Size text |  Text  |
	 --------------------------------------------------------
Valeurs: |    1    | 34798324 |      0      |     2     |  "ab"  |
	 --------------------------------------------------------
	 | uint8_t | uint32_t |  uint16_t   | uint16_t  | char * |
	  -------------------------------------------------------
