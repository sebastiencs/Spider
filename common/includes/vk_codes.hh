#include <string>
#include <map>
#include <boost/cstdint.hpp>

class		VK_CODE
{
  std::map<uint8_t, std::string>	_VKCODES;
  std::string				_unknown;
public:
  VK_CODE()
    {
      _unknown = "[Unknown]";
      _VKCODES[0x01] = "[Left mouse button]";
      _VKCODES[0x02] = "[Right mouse button]";
      _VKCODES[0x03] = "[Control-break processing]";
      _VKCODES[0x04] = "[Middle mouse button (three-button mouse)]";
      _VKCODES[0x05] = "[X1 mouse button]";
      _VKCODES[0x06] = "[X2 mouse button]";
      _VKCODES[0x07] = "[Undefined]";
      _VKCODES[0x08] = "[BACKSPACE]]";
      _VKCODES[0x09] = "[TAB]]";
      _VKCODES[0x0A] = "[Reserved]";
      _VKCODES[0x0C] = "[CLEAR]]";
      _VKCODES[0x0D] = "[ENTER]]";
      _VKCODES[0x0E] = "[Undefined]";
      _VKCODES[0x10] = "[SHIFT]]";
      _VKCODES[0x11] = "[CTRL]]";
      _VKCODES[0x12] = "[ALT]]";
      _VKCODES[0x13] = "[PAUSE]]";
      _VKCODES[0x14] = "[CAPS LOCK]]";
      _VKCODES[0x15] = "[IME Kana mode]";
      _VKCODES[0x15] = "[IME Hanguel mode (maintained for compatibility; use VK_HANGUL)]";
      _VKCODES[0x15] = "[IME Hangul mode]";
      _VKCODES[0x16] = "[Undefined]";
      _VKCODES[0x17] = "[IME Junja mode]";
      _VKCODES[0x18] = "[IME final mode]";
      _VKCODES[0x19] = "[IME Hanja mode]";
      _VKCODES[0x19] = "[IME Kanji mode]";
      _VKCODES[0x1A] = "[Undefined]";
      _VKCODES[0x1B] = "[ESC]";
      _VKCODES[0x1C] = "[IME convert]";
      _VKCODES[0x1D] = "[IME nonconvert]";
      _VKCODES[0x1E] = "[IME accept]";
      _VKCODES[0x1F] = "[IME mode change request]";
      _VKCODES[0x20] = "[SPACEBAR]";
      _VKCODES[0x21] = "[PAGE UP]";
      _VKCODES[0x22] = "[PAGE DOWN]";
      _VKCODES[0x23] = "[END]";
      _VKCODES[0x24] = "[HOME]";
      _VKCODES[0x25] = "[LEFT ARROW]";
      _VKCODES[0x26] = "[UP ARROW]";
      _VKCODES[0x27] = "[RIGHT ARROW]";
      _VKCODES[0x28] = "[DOWN ARROW]";
      _VKCODES[0x29] = "[SELECT]";
      _VKCODES[0x2A] = "[PRINT]";
      _VKCODES[0x2B] = "[EXECUTE]";
      _VKCODES[0x2C] = "[PRINT SCREEN]";
      _VKCODES[0x2D] = "[INS]";
      _VKCODES[0x2E] = "[DEL]";
      _VKCODES[0x2F] = "[HELP]";
      _VKCODES[0x30] = "0";
      _VKCODES[0x31] = "1";
      _VKCODES[0x32] = "2";
      _VKCODES[0x33] = "3";
      _VKCODES[0x34] = "4";
      _VKCODES[0x35] = "5";
      _VKCODES[0x36] = "6";
      _VKCODES[0x37] = "7";
      _VKCODES[0x38] = "8";
      _VKCODES[0x39] = "9";
      _VKCODES[0x3A] = "[undefined]";
      _VKCODES[0x41] = "A";
      _VKCODES[0x42] = "B";
      _VKCODES[0x43] = "C";
      _VKCODES[0x44] = "D";
      _VKCODES[0x45] = "E";
      _VKCODES[0x46] = "F";
      _VKCODES[0x47] = "G";
      _VKCODES[0x48] = "H";
      _VKCODES[0x49] = "I";
      _VKCODES[0x4A] = "J";
      _VKCODES[0x4B] = "K";
      _VKCODES[0x4C] = "L";
      _VKCODES[0x4D] = "M";
      _VKCODES[0x4E] = "N";
      _VKCODES[0x4F] = "O";
      _VKCODES[0x50] = "P";
      _VKCODES[0x51] = "Q";
      _VKCODES[0x52] = "R";
      _VKCODES[0x53] = "S";
      _VKCODES[0x54] = "T";
      _VKCODES[0x55] = "U";
      _VKCODES[0x56] = "V";
      _VKCODES[0x57] = "W";
      _VKCODES[0x58] = "X";
      _VKCODES[0x59] = "Y";
      _VKCODES[0x5A] = "Z";
      _VKCODES[0x5B] = "[Left Windows key (Natural keyboard)]";
      _VKCODES[0x5C] = "[Right Windows key (Natural keyboard)]";
      _VKCODES[0x5D] = "[Applications key (Natural keyboard)]";
      _VKCODES[0x5E] = "[Reserved]";
      _VKCODES[0x5F] = "[Computer Sleep]";
      _VKCODES[0x60] = "0";
      _VKCODES[0x61] = "1";
      _VKCODES[0x62] = "2";
      _VKCODES[0x63] = "3";
      _VKCODES[0x64] = "4";
      _VKCODES[0x65] = "5";
      _VKCODES[0x66] = "6";
      _VKCODES[0x67] = "7";
      _VKCODES[0x68] = "8";
      _VKCODES[0x69] = "9";
      _VKCODES[0x6A] = "*";
      _VKCODES[0x6B] = "+";
      _VKCODES[0x6C] = "[Separator]";
      _VKCODES[0x6D] = "-";
      _VKCODES[0x6E] = "[Decimal]";
      _VKCODES[0x6F] = "/";
      _VKCODES[0x70] = "[F1]";
      _VKCODES[0x71] = "[F2]";
      _VKCODES[0x72] = "[F3]";
      _VKCODES[0x73] = "[F4]";
      _VKCODES[0x74] = "[F5]";
      _VKCODES[0x75] = "[F6]";
      _VKCODES[0x76] = "[F7]";
      _VKCODES[0x77] = "[F8]";
      _VKCODES[0x78] = "[F9]";
      _VKCODES[0x79] = "[F10]";
      _VKCODES[0x7A] = "[F11]";
      _VKCODES[0x7B] = "[F12]";
      _VKCODES[0x7C] = "[F13]";
      _VKCODES[0x7D] = "[F14]";
      _VKCODES[0x7E] = "[F15]";
      _VKCODES[0x7F] = "[F16]";
      _VKCODES[0x80] = "[F17]";
      _VKCODES[0x81] = "[F18]";
      _VKCODES[0x82] = "[F19]";
      _VKCODES[0x83] = "[F20]";
      _VKCODES[0x84] = "[F21]";
      _VKCODES[0x85] = "[F22]";
      _VKCODES[0x86] = "[F23]";
      _VKCODES[0x87] = "[F24]";
      _VKCODES[0x88] = "[Unassigned]";
      _VKCODES[0x90] = "[NUM LOCK]";
      _VKCODES[0x91] = "[SCROLL LOCK]";
      _VKCODES[0x88] = "[Unassigned]";
      _VKCODES[0x90] = "[NUM LOCK]";
      _VKCODES[0x91] = "[SCROLL LOCK]";
      _VKCODES[0x92] = "[OEM specific]";
      _VKCODES[0x97] = "[Unassigned]";
      _VKCODES[0xA0] = "[Left SHIFT]";
      _VKCODES[0xA1] = "[Right SHIFT]";
      _VKCODES[0xA2] = "[Left CONTROL]";
      _VKCODES[0xA3] = "[Right CONTROL]";
      _VKCODES[0xA4] = "[Left MENU]";
      _VKCODES[0xA5] = "[Right MENU]";
      _VKCODES[0xA6] = "[Browser Back]";
      _VKCODES[0xA7] = "[Browser Forward]";
      _VKCODES[0xA8] = "[Browser Refresh]";
      _VKCODES[0xA9] = "[Browser Stop]";
      _VKCODES[0xAA] = "[Browser Search]";
      _VKCODES[0xAB] = "[Browser Favorites]";
      _VKCODES[0xAC] = "[Browser Start and Home]";
      _VKCODES[0xAD] = "[Volume Mute]";
      _VKCODES[0xAE] = "[Volume Down]";
      _VKCODES[0xAF] = "[Volume Up]";
      _VKCODES[0xB0] = "[Next Track]";
      _VKCODES[0xB1] = "[Previous Track]";
      _VKCODES[0xB2] = "[Stop Media]";
      _VKCODES[0xB3] = "[Play/Pause Media]";
      _VKCODES[0xB4] = "[Start Mail]";
      _VKCODES[0xB5] = "[Select Media]";
      _VKCODES[0xB6] = "[Start Application 1]";
      _VKCODES[0xB7] = "[Start Application 2]";
      _VKCODES[0xB8] = "[Reserved]";
      _VKCODES[0xBA] = "[Used for miscellaneous characters; it can vary byboard. For the US standardboard; the \';;\' VK_OEM_PLUS]";
      _VKCODES[0xBB] = "[For any country/region; the \'+\']";
      _VKCODES[0xBC] = "[For any country/region; the \';\']";
      _VKCODES[0xBD] = "[For any country/region; the \'-\']";
      _VKCODES[0xBE] = "[For any country/region; the \'.\']";
      _VKCODES[0xBF] = "[Used for miscellaneous characters; it can vary byboard. For the US standardboard; the \'/?\']";
      _VKCODES[0xC0] = "[Used for miscellaneous characters; it can vary byboard. For the US standardboard; the \'`~\']";
      _VKCODES[0xC1] = "[Reserved]";
      _VKCODES[0xD8] = "[Unassigned]";
      _VKCODES[0xDB] = "[Used for miscellaneous characters; it can vary byboard. For the US standardboard; the \'[{\']";
      _VKCODES[0xDC] = "[Used for miscellaneous characters; it can vary byboard. For the US standardboard; the \'\\|\']";
      _VKCODES[0xDD] = "[Used for miscellaneous characters; it can vary byboard. For the US standardboard; the \']}\']";
      _VKCODES[0xDE] = "[Used for miscellaneous characters; it can vary byboard. For the US standardboard; the \'single-quote/double-quote\']";
      _VKCODES[0xDF] = "[Used for miscellaneous characters; it can vary byboard.]";
      _VKCODES[0xE0] = "[Reserved]";
      _VKCODES[0xE1] = "[OEM specific]";
      _VKCODES[0xE2] = "[Either the angle bracket or the backslash on the RT 102-keyboard]";
      _VKCODES[0xE3] = "[OEM specific]";
      _VKCODES[0xE5] = "[IME PROCESS]";
      _VKCODES[0xE6] = "[OEM specific]";
      _VKCODES[0xE7] = "[Used to pass Unicode characters as if they werestrokes. The VK_PACKET is the low word of a 32-bit Virtual value used for non-keyboard input methods. For more information; see Remark inBDINPUT; SendInput; WM_KEYDOWN; and WM_KEYUP]";
      _VKCODES[0xE8] = "[Unassigned]";
      _VKCODES[0xE9] = "[OEM specific]";
      _VKCODES[0xF6] = "[Attn]";
      _VKCODES[0xF7] = "[CrSel]";
      _VKCODES[0xF8] = "[ExSel]";
      _VKCODES[0xF9] = "[Erase EOF]";
      _VKCODES[0xFA] = "[Play]";
      _VKCODES[0xFB] = "[Zoom]";
      _VKCODES[0xFC] = "[Reserved]";
      _VKCODES[0xFD] = "[PA1]";
      _VKCODES[0xFE] = "[Clear]";
    }
  virtual ~VK_CODE() {};

  const std::string	&getKey(uint8_t key) const {

    auto value = _VKCODES.find(key);

    if (value != _VKCODES.end()) {
      return (value->second);
    }
    else {
      return (_unknown);
    }
  }
};
